//Задание 1
//Создайте массив myFirstArray содержащий строки, числа, булевы значения. Выведите его в консоль.

const myFirstArray = ["apple", 5, true, "banana", 10, false];// объявите переменную здесь
console.log(myFirstArray); //результат выводим в консоль


//Задание 2
//Создайте массив mySecondArray, заполните его любыми значениями. Выведите длину массива.
const mySecondArray = [1, "two", true, 4.5, "five"];// объявите переменную здесь
console.log(mySecondArray.length); //результат выводим в консоль

//Задание 3
//Создайте массив myInformation, который содержит ваше имя, день рождения, месяц рождения и знак зодиака. Выведите массив в консоль, разделяя элементы пробелами. Вам понадобится метод join().
const myInformation = ["Olga", 10, "July", "Cancer"];// объявите переменную здесь
console.log(myInformation.join(" ")); //результат выводим в консоль

//Задание 4
//Добавьте в массив countries значения 'Italy' с индексом 5, 'Spain' с индексом 6 и 'France' с индексом 7. Добавление элементов произведите с помощью метода push().
let countries = ['Austria', 'Belgium', 'Netherlands', 'Czechia', 'Croatia'];
countries.push('Italy', 'Spain', 'France'); //метод push() используется для добавления элементов в конец массива (индексы были установлены автоматически)
console.log(countries); //результат выводим в консоль

//Задание 5
//У вас есть массив countries, содержащий названия нескольких стран. Используя метод массива, выведите в консоль последний элемент массива. Для этого можно использовать свойство length и индексацию элементов.
//Обратите внимание, в JavaScript индексация элементов в массиве начинается с 0.
console.log(countries[countries.length - 1]); //используем свойство length и индексацию элементов. 

//Задание 6
//У вас есть массив countries, содержащий названия нескольких стран. Используя метод массива shift, извлеките первый элемент массива и выведите его в консоль. Обратите внимание, что сам массив должен сохраниться в переменной.
// Извлекаем первый элемент массива с помощью метода shift
let firstCountry = countries.shift();
console.log(firstCountry);// Выводим извлеченный элемент в консоль
console.log(countries);// Выводим обновленный массив после применения метода shift

//Задание 7
//У вас есть массив numbers, содержащий несколько чисел. Используя метод массива map, создайте новый массив squaredNumbers, в котором каждый элемент будет являться квадратом соответствующего элемента из массива numbers. Выведите полученный массив squaredNumbers в консоль.
const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
// Используем метод массива map для создания нового массива squaredNumbers.
const squaredNumbers = numbers.map(number => number ** 2);// Функция, переданная в map, принимает каждый элемент numbers и возвращает его квадрат.
console.log(squaredNumbers);// Выводим новый массив squaredNumbers в консоль.

//Задание 8
//У вас есть массив colors, содержащий названия различных цветов. Используя метод массива forEach, выведите каждый элемент массива в консоль.
let colors = ['red', 'green', 'blue', 'yellow', 'orange'];
// Используем метод массива forEach для перебора каждого элемента массива colors.
colors.forEach(color => { // Функция, переданная в forEach, будет вызываться для каждого элемента массива.
    console.log(color);// Выводим текущий элемент (цвет) в консоль.
});

//Задание 9
//Добавьте в массив russianCities значения 'Санкт-Петербург' с индексом 0, 'Москва' с индексом 1 и 'Екатеринбург' с индексом 2. Добавление элементов выполните с помощью оператора spread.
let russianCities = ['Казань', 'Нижний Новгород'];
russianCities.splice(0, 0, 'Санкт-Петербург'); // Добавляем элемент 'Санкт-Петербург' на позицию 0
// Используем первый аргумент метода splice для указания начальной позиции
// Используем второй аргумент равный 0, чтобы не удалять существующие элементы

russianCities.splice(1, 0, 'Москва'); // Добавляем элемент 'Москва' на позицию 1
// Используем первый аргумент метода splice для указания начальной позиции
// Используем второй аргумент равный 0, чтобы не удалять существующие элементы

russianCities.splice(2, 0, 'Екатеринбург'); // Добавляем элемент 'Екатеринбург' на позицию 2
// Используем первый аргумент метода splice для указания начальной позиции
// Используем второй аргумент равный 0, чтобы не удалять существующие элементы

console.log(russianCities); // Выводим массив russianCities в консоль

//Задание 10
//Напишите функцию, которая вычисляет сумму первого (индекс 0) и последнего элемента массива numbers и выводит результат в консоль. При вычислении индекса последнего элемента используйте свойство length массива.
//Обратите внимание, что массив numbers создан в задании 7.
function sumFirstAndLast(numbers) { // Определяем функцию, принимающую массив чисел в качестве аргумента
    if (numbers.length < 2) { // Проверка, что в массиве есть как минимум два элемента
    console.log("Массив должен содержать как минимум два элемента."); // Вывод сообщения об ошибке в консоль
    return;  // Возврат из функции, чтобы избежать выполнения дальнейших шагов
    }

    const firstElement = numbers[0]; // Получение первого элемента массива
    const lastElement = numbers[numbers.length - 1]; // Получение последнего элемента массива
    const sum = firstElement + lastElement; // Вычисление суммы первого и последнего элементов

    console.log("Сумма первого и последнего элемента массива: " + sum); // Вывод результата в консоль
}

sumFirstAndLast(numbers); // Вызываем функцию sumFirstAndLast с массивом чисел в качестве аргумента

//Задание 11
//У вас есть массив numbers, содержащий числа от 1 до 10. Напишите функцию filterEvenNumbers, которая принимает этот массив в качестве аргумента и выводт в консоль новый массив, содержащий только чётные числа из исходного массива, с использованием метода filter().
function filterEvenNumbers(numbers) { // Определяем функцию, принимающую массив чисел в качестве аргумента
    const evenNumbers = numbers.filter(number => number % 2 === 0); // Создаем новый массив evenNumbers, содержащий только четные числа из исходного массива numbers. 
    //Метод filter вызывается на исходном массиве numbers и принимает в качестве аргумента колбэк-функцию, которая проверяет, является ли число четным.
    console.log("Чётные числа:", evenNumbers); //// Выводим в консоль новый массив evenNumbers, содержащий только четные числа.
}

filterEvenNumbers(numbers); // Вызываем функцию filterEvenNumbers с массивом чисел в качестве аргумента

//Задание 12
//Напишите функцию sortAndPrint, которая принимает копию массива randomNumbers с помощью оператора spread и сортирует его в порядке возрастания с использованием метода sort(). Затем выведите отсортированный массив чисел в консоль.
let randomNumbers = [72, 45, 19, 84, 37, 56, 91, 23, 68, 10, 98, 32];
function sortAndPrint(numbers) { // Определение функции sortAndPrint, которая принимает массив чисел в качестве аргумента
    const copiedNumbers = [...numbers]; // Создаем копию массива с помощью оператора spread
    copiedNumbers.sort((a, b) => a - b);// Сортируем массив в порядке возрастания
    console.log("Отсортированный массив:", copiedNumbers); // Выводим отсортированный массив в консоль
}
// Вызываем функцию sortAndPrint, передавая ей массив randomNumbers в качестве аргумента
sortAndPrint(randomNumbers);
